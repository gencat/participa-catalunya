# frozen_string_literal: true

module Decidim
  module Courses
    # Service that encapsulates all logic related to filtering courses.
    class CourseSearch < ParticipatorySpaceSearch
      def initialize(options = {})
        scope = options.fetch(:scope, Course.all)
        super(scope, options)
      end

      # We need to return the scope generated by the base_query method in the parent
      # class because it doesn't return it, only generates it. We need to do a PR on Decidim?
      def base_query
        super

        @scope
      end

      def current_locale
        I18n.locale.to_s
      end

      # Handle the search_text filter
      def search_search_text
        query
          .where(
            "title->>'#{current_locale}' ILIKE ?", "%#{search_text}%"
          )
          .or(
            query.where(
              "description->>'#{current_locale}' ILIKE ?", "%#{search_text}%"
            )
          )
          .or(
            query.where(
              "cast(decidim_courses.id as text) ILIKE ?", "%#{search_text}%"
            )
          )
      end

      # Handle the date filter
      def search_date
        if options[:date] == "upcoming"
          query.where("start_date >= ? ", Time.current).order(promoted: :desc, start_date: :asc)
        elsif options[:date] == "past"
          query.where("start_date <= ? ", Time.current).order(promoted: :desc, start_date: :desc)
        end
      end

      def search_modality
        return query if modality.blank?

        query.where(modality: modality)
      end
    end
  end
end
